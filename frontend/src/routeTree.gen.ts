/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DesignPostIdImport } from './routes/design/$postId'
import { Route as CodePostIdImport } from './routes/code/$postId'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const DesignIndexLazyImport = createFileRoute('/design/')()
const CodeIndexLazyImport = createFileRoute('/code/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DesignIndexLazyRoute = DesignIndexLazyImport.update({
  path: '/design/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/design/index.lazy').then((d) => d.Route))

const CodeIndexLazyRoute = CodeIndexLazyImport.update({
  path: '/code/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/code/index.lazy').then((d) => d.Route))

const DesignPostIdRoute = DesignPostIdImport.update({
  path: '/design/$postId',
  getParentRoute: () => rootRoute,
} as any)

const CodePostIdRoute = CodePostIdImport.update({
  path: '/code/$postId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/code/$postId': {
      id: '/code/$postId'
      path: '/code/$postId'
      fullPath: '/code/$postId'
      preLoaderRoute: typeof CodePostIdImport
      parentRoute: typeof rootRoute
    }
    '/design/$postId': {
      id: '/design/$postId'
      path: '/design/$postId'
      fullPath: '/design/$postId'
      preLoaderRoute: typeof DesignPostIdImport
      parentRoute: typeof rootRoute
    }
    '/code/': {
      id: '/code/'
      path: '/code'
      fullPath: '/code'
      preLoaderRoute: typeof CodeIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/design/': {
      id: '/design/'
      path: '/design'
      fullPath: '/design'
      preLoaderRoute: typeof DesignIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  AboutLazyRoute,
  CodePostIdRoute,
  DesignPostIdRoute,
  CodeIndexLazyRoute,
  DesignIndexLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/code/$postId",
        "/design/$postId",
        "/code/",
        "/design/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/code/$postId": {
      "filePath": "code/$postId.tsx"
    },
    "/design/$postId": {
      "filePath": "design/$postId.tsx"
    },
    "/code/": {
      "filePath": "code/index.lazy.tsx"
    },
    "/design/": {
      "filePath": "design/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
